:css
  #referral_sources {
    text-align: center;
  }
  table {
    border-width: 1px;
    border-style: solid;
    border-color: #000000;
    border-collapse: collapse;
    width: 100%;
  }

  th {
    border-width: 1px;
    border-style: solid;
    border-color: #000000;
    text-align: center;
    font-weight: bold;
  }

  td {
    border-width: 1px;
    border-style: solid;
    border-color: #000000;
    text-align: center;
  }
  
  h1 {
    margin: 20px auto;
    font-size: 28px;
    color: blue;
  }
%script{:src => "http://maps.googleapis.com/maps/api/js?sensor=false", :type => "text/javascript"}
-#%script{:src => "http://acme.com/javascript/Clusterer2.jsm", :type => "text/javascript"}
:javascript
  var map;
  var clusterer;
  var infowindow;
  var greenMarkerOptions, redMarkerOptions, orangeMarkerOptions, blueMarkerOptions;
  var allHouseMarkers = Array();
  var droppedMarkers = Array();
  var knockedMarkers = Array();
  var postKnockedMarkers = Array();
  var noMarkers = Array();
  var onMarkers = Array();
  function createMarker(point, html, image) {
    var marker = new google.maps.Marker({
      position: point,
      title: html,
      icon: image
    });
    google.maps.event.addListener(marker, 'click', function(marker){
      infowindow = new google.maps.InfoWindow();
      infowindow.open(map, marker, marker.title);
    });

    //var marker = new GMarker(point, colorOptions);
    //GEvent.addListener(marker, "click", function() {
    //  marker.openInfoWindowHtml(html);
    //});
    return marker;
  }
  /*function createMarkerLight(point, html, colorOptions) {
    var marker = new MarkerLight(point, colorOptions);
    return marker;
  }*/
  function initialize() {
      /*map = new GMap2(document.getElementById("map_canvas"));
      map.enableContinuousZoom();
      map.enableGoogleBar();
      map.enableScrollWheelZoom();
      map.enablePinchToZoom();
      control = new GLargeMapControl()
      map.addControl(control, control.getDefaultPosition())
      clusterer = new Clusterer(map);
      clusterer.SetMaxVisibleMarkers(1500);
      geocoder = new GClientGeocoder();
      geocoder.getLatLng('#{@center_zip_code}', function(point){ map.setCenter(point, 16); });
      console.log("Centered");*/
      geocoder = new google.maps.Geocoder();
      var myOptions = {
        zoom: 16,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

      if (navigator.geolocation)
      {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          map.setCenter(pos);
        }, function(){
          handleNoGeolocation(true);
        });
      }
      else
        handleNoGeolocation(false);

      // Set up markers
      greenMarker = "http://www.google.com/intl/en_us/mapfiles/ms/micons/green-dot.png";
      greyMarker = "http://www.google.com/intl/en_us/mapfiles/ms/micons/pink-dot.png";
      redMarker = "http://www.google.com/intl/en_us/mapfiles/ms/micons/red-dot.png";
      yellowMarker = "http://www.google.com/intl/en_us/mapfiles/ms/micons/yellow-dot.png";
      orangeMarker = "http://www.google.com/intl/en_us/mapfiles/ms/micons/orange-dot.png";
      blueMarker = "http://www.google.com/intl/en_us/mapfiles/ms/micons/blue-dot.png";
      drawPoints();
  }

  function handleNoGeolocation(errorFlag) {
    if (errorFlag)
    {
      var content = 'Error: The Geolocation service failed.';
    }
    else
    {
      var content = 'Error: Your browser doesn\'t support geolocation.';
    }
    var options = {
      map: map,
      position: new google.maps.LatLng(60, 105),
      content: content
    };
    var infowindow = new google.maps.InfoWindow(options);
    map.setCenter(options.position);
  }

  function showMarkerSet(markers, cluster)
  {
    cluster = typeof(cluster) != 'undefined' ? cluster : false;
    $.each(markers, function(key, marker){
      if (cluster)
        clusterer.AddMarker(marker);
      else
        marker.setMap(map);
    });
  }

  function hideMarkerSet(markers, cluster)
  {
    cluster = typeof(cluster) != 'undefined' ? cluster : false;
    $.each(markers, function(key, marker){
      if (cluster)
        clusterer.RemoveMarker(marker);
      else
        marker.setMap(null);
    });
  }

  function drawPoints()
  {
    $.ajax({
      url: '/api/communities/#{@community_id}/registration_points',
      dataType: 'json',
      success: function(data) {
        $.each(data, function(key, val) {
          var point = new google.maps.LatLng(val['lat'], val['lng']);
          var marker = createMarker(point, val['name'] + '\n' + val['address'], greenMarker);
          onMarkers.push(marker);
        });
        showMarkerSet(onMarkers);
      }
    });
    $.ajax({
      url: '/api/communities/#{@community_id}/data_points?top=true',
      dataType: 'json',
      success: function(data) {
        $.each(data, function(key, val) {
          var colorOption;
          if (val['status'] == 'house') {
            var point = new google.maps.LatLng(val['lat'], val['lng']);
            allHouseMarkers.push(createMarker(point, val['address'], greyMarker));
          }
          if (val['status'] == 'dropped') {
            if (val['lat'] && val['lng'])
            {
              colorOption = yellowMarker;
              var point = new google.maps.LatLng(val['lat'], val['lng']);
              var marker = createMarker(point, val['address'], colorOption);
              droppedMarkers.push(marker);
            }
            else
            {
              geocoder.geocode({ 'address' : val['address'] }, function(result, status){
                if (status == google.maps.GeocoderStatus.OK)
                  droppedMarkers.push(createMarker(result[0].geometry.location, val['address'], yellowMarker));
              });
            }
          }
          if (val['status'] == 'knocked') {
            if (val['lat'] && val['lng'])
            {
              var point = new google.maps.LatLng(val['lat'], val['lng']);
              var marker = createMarker(point, val['address'], orangeMarker);
              knockedMarkers.push(marker);
            }
            else
            {
              geocoder.geocode({ 'address' : val['address'] }, function(result, status){
                if (status == google.maps.GeocoderStatus.OK)
                  knockedMarkers.push(createMarker(result[0].geometry.location, val['address'], orangeMarker));
              });
            }
          }
          if (val['status'] == 'post_knocked_1') {
            if (val['lat'] && val['lng'])
            {
              var point = new google.maps.LatLng(val['lat'], val['lng']);
              var marker = createMarker(point, val['address'], blueMarker);
              postKnockedMarkers.push(marker);
            }
            else
            {
              geocoder.geocode({ 'address' : val['address'] }, function(result, status){
                if (status == google.maps.GeocoderStatus.OK)
                  postKnockedMarkers.push(createMarker(result[0].geometry.location, val['address'], blueMarker));
              });
            }
          }
          if (val['status'] == 'no') {
            if (val['lat'] && val['lng'])
            {
              var point = new google.maps.LatLng(val['lat'], val['lng']);
              var marker = createMarker(point, val['address'], redMarker);
              noMarkers.push(marker);
            }
            else
            {
              geocoder.geocode({ 'address' : val['address'] }, function(result, status){
                if (status == google.maps.GeocoderStatus.OK)
                  noMarkers.push(createMarker(result[0].geometry.location, val['address'], redMarker));
              });
            }
          }
        });
        //console.log("Showing all markers");
        //showMarkerSet(allHouseMarkers.concat(droppedMarkers).concat(knockedMarkers).concat(postKnockedMarkers).concat(noMarkers));
      }
    });
  }
  $(document).ready(initialize);
  var TOGGLE_OPTS = 'slow';
  function toggle_map()
  {
    hide_all();
    $("#map").toggle(TOGGLE_OPTS);
    initialize();
  }
  function toggle_overview()
  {
    hide_all();
    $("#community_overview").toggle(TOGGLE_OPTS);
  }
  function toggle_doc()
  {
    hide_all();
    $("#google_doc").toggle(TOGGLE_OPTS);
  }
  function toggle_referrers()
  {
    hide_all();
    $("#community_referrers").toggle(TOGGLE_OPTS);
  }
  function toggle_journal()
  {
    hide_all();
    $("#daily_journal").toggle(TOGGLE_OPTS);
  }
  function hide_all()
  {
    $("#map").hide();
    $("#community_overview").hide();
    $("#google_doc").hide();
    $("#community_referrers").hide();
    $("#daily_journal").hide();
  }
  
  var entry_count = 0;
  function add_entry()
  {
    entry_count += 1;
    $("#addresses").append('<br /><input id="number" name="number' + entry_count + '" placeholder="1-10O" size="10" type="text" value="" /><input id="address" name="address' + entry_count + '" placeholder="Maple Ave" size="50" type="text" value="" />');
  }
#organizer_app
  #links
    %a{:onclick => "toggle_map();", :style=>"text-decoration: underline; cursor: pointer;"} Toggle Map
    %br
    %a{:onclick => "toggle_overview();", :style=>"text-decoration: underline; cursor: pointer;"} Overview
    %br
    %a{:onclick => "toggle_doc();", :style=>"text-decoration: underline; cursor: pointer;"} Community Leaders
    %br
    %a{:onclick => "toggle_referrers();", :style=>"text-decoration: underline; cursor: pointer;"} Referrers
    %br
    %a{:onclick => "toggle_journal();", :style => "text-decoration: underline; cursor: pointer;"} Daily Journal
    %br
  #map{:style => "display: none;"}
    #map_canvas{:style => "width: 1024px; height: 350px;"}
    #map_form
      = form_tag "/organizer/add", :method => :post do
        #addresses
          = text_field_tag :number, "", :size => 10, :placeholder => "1-10O"
          = text_field_tag :address, "", :placeholder => "Maple Ave", :size => 50
          = @center_zip_code
          = select_tag :status, options_for_select([["Door-Dropped", 'dropped'], ['Door-Knocked', 'knocked'], ['Post-Knocked Once', 'post_knocked_1'], ['Impossibility', 'no']])
          %a{:onclick => "add_entry();"} Add More
        %br
        = submit_tag "Enter"
      %a{:onclick => "showMarkerSet(allHouseMarkers);", :class => "markers show", :style => "cursor: pointer"} Show All Houses
      |
      %a{:onclick => "hideMarkerSet(allHouseMarkers);", :class => "markers hide", :style => "cursor: pointer"} Hide All Houses
      %br
      %a{:onclick => "showMarkerSet(onMarkers);", :class => "markers show", :style => "cursor: pointer"} Show People on CommonPlace
      |
      %a{:onclick => "hideMarkerSet(onMarkers);", :class => "markers hide", :style => "cursor: pointer"} Hide People on CommonPlace
      %br
      %a{:onclick => "showMarkerSet(droppedMarkers);", :class => "markers show", :style => "cursor: pointer"} Show Doordrops
      |
      %a{:onclick => "hideMarkerSet(droppedMarkers);", :class => "markers hide", :style => "cursor: pointer"} Hide Doordrops
      %br
      %a{:onclick => "showMarkerSet(knockedMarkers);", :class => "markers show", :style => "cursor: pointer"} Show Doorknocks
      |
      %a{:onclick => "hideMarkerSet(knockedMarkers);", :class => "markers hide", :style => "cursor: pointer"} Hide Doorknocks
      %br
      %a{:onclick => "showMarkerSet(postKnockedMarkers);", :class => "markers show", :style => "cursor: pointer"} Show Post-Knocks
      |
      %a{:onclick => "hideMarkerSet(postKnockedMarkers);", :class => "markers hide", :style => "cursor: pointer"} Hide Post-Knocks
      %br
      %a{:onclick => "showMarkerSet(noMarkers);", :class => "markers show", :style => "cursor: pointer"} Show Negative Responses
      |
      %a{:onclick => "hideMarkerSet(noMarkers);", :class=> "markers hide", :style => "cursor: pointer"} Hide Negative Responses

  #community_overview{:style => "display: none;"}
    = render :partial => "admin/community_overview", :collection => [current_community]
  #google_doc{:style => "display: none;"}
    - if current_community.google_docs_url.present?
      %iframe{:src => current_community.google_docs_url, :width => "100%", :height => "800px"}
    - else
      No such document exists
  #community_referrers{:style => "display: none;"}
    %h1 Recent Referrals
    = render :partial => "admin/community_referrer", :collection => [current_community]
  #daily_journal{:style => "display: none;"}
    Coming soon :-)
